import barrileteCosmico.*

describe "Barrilete Cósmico" {

	var garlicsSea
	var silversSea
	var lastToninas
	var goodAirs
	var phari
	var avion
	var auto
	var barco
	var tren
	var viajeNuevo1
	var viajeNuevo2

	fixture{
		garlicsSea 	= new Destino(nombre= "Garlic's Sea",sugerenciasDeViaje = ["Caña de Pescar", "Piloto"] ,precioPorVolar = 2500,kilometroDeUbicacion =0)
		silversSea 	= new Destino(nombre= "Silver's Sea",sugerenciasDeViaje = ["Protector Solar", "Equipo de Buceo"] ,precioPorVolar = 1350,kilometroDeUbicacion =10)
		lastToninas = new Destino(nombre= "Last Toninas",sugerenciasDeViaje = ["Vacuna Gripal", "Vacuna B", "Necronomicon"] ,precioPorVolar = 3500,kilometroDeUbicacion =20)
		goodAirs 	= new Destino(nombre= "Good Airs",sugerenciasDeViaje = ["Cerveza", "ProtectorSolar"] ,precioPorVolar = 1500,kilometroDeUbicacion =30)
	/*En los destino invente los kilometros de origen*/
		avion = new MedioDeTransporte(duracion = 1, valorPorKilometro = 50)
		auto = new MedioDeTransporte(duracion = 10, valorPorKilometro = 10)
		barco = new MedioDeTransporte(duracion = 7, valorPorKilometro = 30)
		tren = new MedioDeTransporte(duracion = 9, valorPorKilometro = 20)
			
		barrileteCosmico.agregarDestino(garlicsSea)
		barrileteCosmico.agregarDestino(silversSea)
		barrileteCosmico.agregarDestino(lastToninas)
		barrileteCosmico.agregarDestino(goodAirs)
		barrileteCosmico.agregarMedioDeTransporte(avion)
		barrileteCosmico.agregarMedioDeTransporte(auto)
		barrileteCosmico.agregarMedioDeTransporte(barco)
		barrileteCosmico.agregarMedioDeTransporte(tren)
		
		phari = new Usuario(username="PHari", historial=[viajeNuevo1,viajeNuevo2], cuenta = 3700, siguiendo= [],localidadDeOrigen = garlicsSea)
		/*cambie el valor de 1500 a 3700 de la cuenta para que dieran los ultimos 2 test de phari
		 * 
		phari = new Usuario(username="PHari", historial=[lastToninas,goodAirs], cuenta = 1500, siguiendo= [])*/
		
		viajeNuevo1 = new Viajes(localidadDeOrigen = garlicsSea, localidadDeDestino = lastToninas, medioDeTransporte = auto)
		viajeNuevo2 = new Viajes(localidadDeOrigen = garlicsSea, localidadDeDestino = goodAirs, medioDeTransporte = avion)
	}

	test "Los destinos más importantes de BC son Garlic's Sea y Last Toninas" {	
		assert.equals([garlicsSea, lastToninas], barrileteCosmico.destinosMasImportantes())
	}
	
	test "Descuento del 25% en Last Toninas - Precio"{
		lastToninas.aplicarDescuento(25)
		assert.equals(2625, lastToninas.precioPorVolar())
	}
	
	test "Descuento del 25% en Last Toninas - Certificado"{
		lastToninas.aplicarDescuento(25)
		assert.that(lastToninas.sugerenciasDeViaje().contains("Certificado de descuento"))
	}
	
	test "Silver's Sea no es un destino peligroso"{
		assert.notThat(silversSea.esPeligroso())
	}
	
	test "Descuento del 15% a garlic´s sea"{
		barrileteCosmico.aplicarDescuentoATodosLosDestinos(15)
		assert.equals(2125,garlicsSea.precioPorVolar())
	}
	test "Descuento del 15% a Silver´s Sea"{
		barrileteCosmico.aplicarDescuentoATodosLosDestinos(15)
		assert.equals(1147.5,silversSea.precioPorVolar())
		
	}
	test "Descuento del 15% a Last Toninas"{
		barrileteCosmico.aplicarDescuentoATodosLosDestinos(15)
		assert.equals(2975,lastToninas.precioPorVolar())
		
	}
	test "Descuento del 15% a Good Airs"{
		barrileteCosmico.aplicarDescuentoATodosLosDestinos(15)
		assert.equals(1275,goodAirs.precioPorVolar())
	}

	test "Destino más peligrosos hasta el momento es Last Toninas"{
		assert.equals([lastToninas],barrileteCosmico.lugaresPeligrosos())
	}
	
	test "BC es empresa extrema"{
		assert.that(barrileteCosmico.esEmpresaExtrema())	
	}
	
	test "Los destinos de BC son Last Toninas, Garlic's Sea, Good Airs y Silver's Sea"{
		assert.equals(["Garlic's Sea", "Silver's Sea", "Last Toninas", "Good Airs"], barrileteCosmico.cartaDeDestinos())
	}
	
	test "PHari tiene 500 km"{
		assert.equals(500, phari.kilometros())
	}/*este no tengo idea que es lo de inicializar la variable viajes */
	
	test "PHari puede viajar a viajeNuevo1 y dicho viaje se agrega a su historial"{
		phari.viajar(viajeNuevo1)
		assert.that(phari.historial().contains(viajeNuevo1))
	}/*test "PHari puede volar a Silver's Sea y dicho destino se agrega a su historial"{
		phari.volarA(silversSea)
		assert.that(phari.historial().contains(silversSea))
	} */

	test "Phari puede viajar a viajeNuevo2 y tiene $700"{
		phari.viajar(viajeNuevo2)
		assert.equals(700, phari.cuenta())
	}/*cambie el valor que tenia que dar porque al cambiar el method cambia el resultado
	 * 
	test "Phari puede volar a Silver's Sea y tiene $150"{
		phari.volarA(silversSea)
		assert.equals(150, phari.cuenta())
	}
	 */
}
