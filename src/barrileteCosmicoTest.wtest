import barrileteCosmico.*

describe "Barrilete Cósmico" {

	var garlicsSea
	var silversSea
	var lastToninas
	var goodAirs
	var phari
	var avion
	var auto
	var barco
	var tren
	var micro
	var viajeNuevo1
	var viajeNuevo2
	var turbina1
	var turbina2
	var micro2
	var tren2

	fixture{
		garlicsSea 	= new Playa(nombre= "Garlic's Sea",sugerenciasDeViaje = ["Caña de Pescar", "Piloto"] ,precioPorVolar = 2500,kilometroDeUbicacion=0)
		silversSea 	= new CiudadHistorica(nombre= "Silver's Sea",sugerenciasDeViaje = ["Protector Solar", "Equipo de Buceo"] ,precioPorVolar = 2350,kilometroDeUbicacion=100,museos=["Ciencias","Informatica","Historia"])
		lastToninas = new Playa(nombre= "Last Toninas",sugerenciasDeViaje = ["Vacuna Gripal", "Vacuna B", "Necronomicon"] ,precioPorVolar = 3500,kilometroDeUbicacion=200)
		goodAirs 	= new Montania(nombre= "Good Airs",sugerenciasDeViaje = ["Cerveza", "ProtectorSolar","Vacuna"] ,precioPorVolar = 1500,kilometroDeUbicacion=300,altura = 5001)
	
		turbina1 = new Turbina(nivelDeImpulso=100)
		turbina2 = new Turbina(nivelDeImpulso=200)
		
		avion = new Avion(duracion = 1, turbinas = [])
		auto = new MedioDeTransporte(duracion = 10)
		barco = new Barco(duracion = 7,probabilidadDeChocarConIceberg=1000)
		tren = new Tren(duracion = 9)
		micro = new Micro(duracion = 8)
		tren2 = new Tren(duracion = 9)
		micro2 = new Micro(duracion = 8)
		
		avion.agregarTurbina(turbina1)
		avion.agregarTurbina(turbina2)
		
		barrileteCosmico.agregarDestino(garlicsSea)
		barrileteCosmico.agregarDestino(silversSea)
		barrileteCosmico.agregarDestino(lastToninas)
		barrileteCosmico.agregarDestino(goodAirs)
		
		barrileteCosmico.agregarMedioDeTransporte(auto)
		barrileteCosmico.agregarMedioDeTransporte(tren)
		barrileteCosmico.agregarMedioDeTransporte(micro)
		
		viajeNuevo1 = new Viaje(localidadDeOrigen = garlicsSea, localidadDeDestino = lastToninas, medioDeTransporte = tren)
		viajeNuevo2 = new Viaje(localidadDeOrigen = garlicsSea, localidadDeDestino = silversSea, medioDeTransporte = micro)
		
		phari = new Usuario(username="Phari", historial=[viajeNuevo1,viajeNuevo2],cuenta = 880000, siguiendo= [], origen = garlicsSea, destino = silversSea, perfil = empresario, mochila=["Protector Solar","Equipo de Buceo","Vacuna Gripal", "Vacuna B", "Necronomicon"])
	}

	test "Los destinos más importantes de BC son Garlic's Sea, Last Toninas y Good Airs" {	
		assert.equals([garlicsSea, lastToninas, goodAirs], barrileteCosmico.destinosMasImportantes())
	}
	
	test "Descuento del 25% en Last Toninas - Precio"{
		lastToninas.aplicarDescuento(25)
		assert.equals(2625, lastToninas.precioPorVolar())
	}
	
	test "Descuento del 25% en Last Toninas - Certificado"{
		lastToninas.aplicarDescuento(25)
		assert.that(lastToninas.sugerenciasDeViaje().contains("Certificado de descuento"))
	}
	
	test "Silver's Sea es un destino peligroso porque Phari no tiene Asistencia al viajero"{
		assert.that(silversSea.esPeligrosoPara(phari))
	}
	
	test "Descuento del 15% a Garlic's Sea"{
		barrileteCosmico.aplicarDescuentoATodosLosDestinos(15)
		assert.equals(2125,garlicsSea.precioPorVolar())
	}
	
	test "Descuento del 15% a Silver's Sea"{
		barrileteCosmico.aplicarDescuentoATodosLosDestinos(15)
		assert.equals(1997.5,silversSea.precioPorVolar())
	}
	
	test "Descuento del 15% a Last Toninas"{
		barrileteCosmico.aplicarDescuentoATodosLosDestinos(15)
		assert.equals(2975,lastToninas.precioPorVolar())		
	}
	
	test "Descuento del 15% a Good Airs"{
		barrileteCosmico.aplicarDescuentoATodosLosDestinos(15)
		assert.equals(1275,goodAirs.precioPorVolar())
	}

	test "Los destinos más peligrosos para Phari son Silver's Sea y Good Airs"{
		assert.equals([silversSea, goodAirs],barrileteCosmico.lugaresPeligrososPara(phari))
	}
	
	test "BC es empresa extrema"{
		assert.that(barrileteCosmico.esEmpresaExtremaPara(phari))	
	}
	
	test "Los destinos de BC son Last Toninas, Garlic's Sea, Good Airs y Silver's Sea"{
		assert.equals(["Garlic's Sea", "Silver's Sea", "Last Toninas", "Good Airs"], barrileteCosmico.cartaDeDestinos())
	}
	
	test "Phari tiene 300 km"{
		assert.equals(300, phari.kilometros())
	}
	
	test "Phari puede viajar a viajeNuevo1 y dicho viaje se agrega a su historial"{
		phari.viajar(viajeNuevo1)
		assert.that(phari.historial().contains(viajeNuevo1))
	}

	test "Phari puede viajar a viajeNuevo2 y tiene $377650"{
		phari.viajar(viajeNuevo2)
		assert.equals(377650, phari.cuenta())
	}

	/* TESTS SEGUNDA PARTE */

	test "Barrilete Cósmico tiene diferentes medios de transporte"{
		assert.equals([auto, tren, micro], barrileteCosmico.mediosDeTransporte())
	}
	
	test "Last Toninas se encuentra en el km 200"{
		assert.equals(200, lastToninas.kilometroDeUbicacion())
	}
	
	test "La distancia entre Last Toninas y Good Airs es de 100km"{
		assert.equals(100, lastToninas.kilometrosHasta(goodAirs))
	}
	
	test "La distancia entre Last Toninas y Good Airs es la misma que entre Good Airs y Last Toninas"{
		assert.equals(goodAirs.kilometrosHasta(lastToninas), lastToninas.kilometrosHasta(goodAirs))
	}
	
	test "El precio del viajeNuevo1 es $739500"{
		assert.equals(739500, viajeNuevo1.precioDelViaje())
	}
	
	test "El precio del viajeNuevo2 es $502350"{
		assert.equals(502350, viajeNuevo2.precioDelViaje())
	}
	
	test "La localidad de origen de Phari luego de hacer el viajeNuevo1 es Last Toninas"{
		phari.viajar(viajeNuevo1)
		assert.equals(lastToninas, phari.localidadDeOrigen())
	}
	
	test "Luego de viajar a nuevoViaje1, a Phari no le alcanza para viajar a viajeNuevo2"{
		phari.viajar(viajeNuevo1)
		assert.throwsException({ phari.viajar(viajeNuevo2) })
	}
	
	/* TESTS TERCERA PARTE */
	
	test "Las playas no son destinos peligrosos"{
		assert.notThat(lastToninas.esPeligrosoPara(phari))
	}
	
	test "Las montanias son destinos peligrosos si miden más de 5000m"{
		assert.that(goodAirs.esPeligrosoPara(phari))
	}
	
	test "Las ciudades historicas son destinos peligroso si el usuario no tiene asistencia al viajero"{
		assert.that(silversSea.esPeligrosoPara(phari))
	}
	
	test "Las montanias siempre son un destino destacado"{
		assert.that(goodAirs.destacado())
	}
	
	test "Las ciudades historicas que tienen menos de 3 museos no son destacadas aunque su precio sea mayor a $2000"{
		assert.notThat(silversSea.destacado())
	}
	
	test "El valor por kilometro del avion es la sumatoria del impulso de las turbinas"{
		assert.equals(300,avion.valorPorKilometro())
	}
	
	test "El valor por kilometro del micro es siemre 5000"{
		assert.equals(5000,micro.valorPorKilometro())
	}
	
	test "El valor por kilometro del tren es 3680"{
		assert.equals(3680,tren.valorPorKilometro())
	}
	
	test "El valor por kilometro del barco es"{
		assert.equals(1000000,barco.valorPorKilometro())
	}
	
//	test "Un empresario elige viajar en avión porque es el más rápido y no le importa su costo"{
//		assert.equals(avion, empresario.elegirMedioDeTransporteDe(barrileteCosmico))
//	}
//	
//	test "Un estudiante elige viajar en __ porque es el más rápido dentro de lo que puede pagar"{
//		assert.equals(avion, estudiante.elegirMedioDeTransporteDe(barrileteCosmico))
//	}
	
	test "Phari no puede viajar porque le falta un item indispensable para viajar a Silver's Sea"{
		phari.vaciarMochila()
		assert.throwsException({ phari.viajar(viajeNuevo2) })
	}
	
}
